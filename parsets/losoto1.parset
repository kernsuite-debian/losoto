# Example of LoSoTo 1.0 parset [deprecated!]
# Includes all possible options
#
# step variable override global variable

# this are the global values
LoSoTo.Steps = [abs,clip,interp,norm,plot,reset,smooth,tecfit,tecscreen]
LoSoTo.Solset = [sol000]
LoSoTo.Soltab = [sol000/amplitude000,sol000/phase000]
LoSoTo.SolType = [phase]
LoSoTo.ant = [] # string used for regex selections, vectors for complete names (equal for 'pol' and 'dir')
                # to exclude stations, use ^((?!string1|string2|string3).)*$ to exclude stations
                # with names containing string1, string2, or string3
LoSoTo.pol = [XX, YY]
LoSoTo.dir = [pointing]
LoSoTo.Ncpu = 0 # number of cpus in multithread operations, if 0 use all available cpus

# parameters available in every step to overwrite the global selection
LoSoTo.Steps.everystep.Soltab = [sol000/amplitude000,sol000/rotation000]
LoSoTo.Steps.everystep.ant = []
LoSoTo.Steps.everystep.pol = []
LoSoTo.Steps.everystep.dir = []
LoSoTo.Steps.everystep.SolType = []
LoSoTo.Steps.everystep.time = [] # also with .minmax = [min, max]

LoSoTo.Steps.abs.Operation = ABS

LoSoTo.Steps.clip.Operation = CLIP
LoSoTo.Steps.clip.ClipLevel = 5 # factor above/below median at which to clip
LoSoTo.Steps.clip.Axes = [time] # axis along which to calculate the median
LoSoTo.Steps.clip.Log = True # clip is done in log space

LoSoTo.Steps.clocktec.Operation = CLOCKTEC
LoSoTo.Steps.clocktec.FlagBadChannels = True # detect and remove bad channel before fitting
LoSoTo.Steps.clocktec.FlagCut = 1.5
LoSoTo.Steps.clocktec.Chi2cut = 30000.
LoSoTo.Steps.clocktec.CombinePol = False # find a combined polarization solution
LoSoTo.Steps.clocktec.FitOffset = False

LoSoTo.Steps.crossdelay.Operation = CROSSDELAY
LoSoTo.Steps.crossdelay.OutTable = phasediff # output table name, same solset
LoSoTo.Steps.crossdelay.MaxRes = 1. # maximum acceptable rms of the residuals in radians before flagging, 0: no check
LoSoTo.Steps.crossdelay.Smooth = 0 # median-smooth in time the resulting delays, number of timestamp for smoothing window
LoSoTo.Steps.crossdelay.Replace = False # replace using smoothed value instead of flag bad data?

LoSoTo.Steps.duplicate.Operation = DUPLICATE
LoSoTo.Steps.duplicate.InTable = sol000/clock000 # complete solset/solt
LoSoTo.Steps.duplicate.OutTable = sol000/clock_bkp000 # complete solset/soltab or ''

# PARALLEL
LoSoTo.Steps.flag.Operation = FLAG
LoSoTo.Steps.flag.Axes = time # axes along which to smooth/find outlier (e.g. 'time' or [time, freq]), max 2 values
LoSoTo.Steps.flag.MaxCycles = 5 # number of flagging cycles
LoSoTo.Steps.flag.MaxRms = 5. # rms to clip outliers
LoSoTo.Steps.flag.MaxRmsNoise = 0 # Do a running rms and then flag those regions that have a rms higher than MaxRmsNoise*rms_of_rmses, if 0 ignored
LoSoTo.Steps.flag.FixRmsNoise = 0 # instead of calculating rms of the rmses use this value (it will not be multiplied by the MaxRmsNoise), if 0 ignored
LoSoTo.Steps.flag.WindowNoise = 11 # window for the running rms
LoSoTo.Steps.flag.Order = 3  # order of the function fitted during trend removal. If 2 values are given in axes, then 2 values must be given here. If mode=smooth these are the window of the running median (0=all axis).
LoSoTo.Steps.flag.Reaplce = False # replace bad values with the interpolated ones, instead of flagging them
LoSoTo.Steps.flag.PreFlagZeros = False # flag zeros/ones (bad solutions in BBS). They should be flagged at import time
LoSoTo.Steps.flag.Mode = smooth # smooth / poly / spline
LoSoTo.Steps.flag.Reference = '' # antenna name for referencing phases

LoSoTo.Steps.faraday.Operation = FARADAY
LoSoTo.Steps.faraday.maxResidual = 1. #  max average residual in rad before flagging datapoint; 0: no check
LoSoTo.Steps.faraday.refAnt = '' # a reference antenna

# PARALLEL
LoSoTo.Steps.flagextend.Operation = FLAGEXTEND
LoSoTo.Steps.flagextend.Axes = ['freq','time'] # axes used to find close flags
LoSoTo.Steps.flagextend.Percent = 90 # percent of flagged data around the point to flag it
LoSoTo.Steps.flagextend.Size = [11,11] # size of the window (diameter, per axis), if 0 is given then the entire length of the axis is assumed, must be a vector of same length of Axes
LoSoTo.Steps.flagextend.Cycles = 3 # number of independent cycles of expansion

LoSoTo.Steps.interp.Operation = INTERP
LoSoTo.Steps.interp.CalSoltab = ''
LoSoTo.Steps.interp.CalDir = '' # use a specific dir instead that the same of the tgt
LoSoTo.Steps.interp.InterpAxes = [time, freq]
LoSoTo.Steps.interp.InterpMethod = linear # nearest, linear, cubic
LoSoTo.Steps.interp.Rescale = False
LoSoTo.Steps.interp.MedAxis = '' # rescale the median of this axis

LoSoTo.Steps.norm.Operation = NORM
LoSoTo.Steps.norm.NormVal = 1.
LoSoTo.Steps.norm.NormAxes = [time,ant]

# PARALLEL
LoSoTo.Steps.plot.Operation = PLOT
LoSoTo.Steps.plot.Axes = [] # 1- or 2-element array which says the coordinates to plot (2 for 3D plots)
LoSoTo.Steps.plot.Columns = 0 # Number of columns in a multi-table image, if 0 then it is automatically chosen
LoSoTo.Steps.plot.FigSize = [0,0] # Size of the image [x,y], if one of the values is 0, then it is automatically chosen
LoSoTo.Steps.plot.MinMax = [0,0] # min max value for the independent variable (0 means automatic)
LoSoTo.Steps.plot.TableAxis = [] # the axis to plot on a page - e.g. ant to get all antenna's on one file
LoSoTo.Steps.plot.ColorAxis = [] # the axis to plot in different colours - e.g. pol to get correlations with different colors
LoSoTo.Steps.plot.DiffAxis = [] # this must be a len=2 axis and the plot will have the differential value - e.g. 'pol' to plot XX-YY
LoSoTo.Steps.plot.Log = "" # log='XYZ' to set which axes to put in Log
LoSoTo.Steps.plot.PlotFlag = False
LoSoTo.Steps.plot.Unwrap = False
LoSoTo.Steps.plot.Reference = '' # antenna name for referencing phases
LoSoTo.Steps.plot.Prefix = ''
LoSoTo.Steps.plot.Add = [] # tables to "add" (e.g. 'sol000/tec000'), it works only for tec and clock to be added to phases
LoSoTo.Steps.plot.MakeAntPlot = False # Make a plot containing antenna coordinates in x,y and in color the value to plot, Axes must be [ant]
LoSoTo.Steps.plot.MakeMovie = False # make a movie summing up all the produced plots

LoSoTo.Steps.reset.Operation = RESET

LoSoTo.Steps.residuals.Operation = RESIDUALS
LoSoTo.Steps.residuals.Sub = [sol000/tec000,sol000/clock000] # tables to subtract (only clock and tec from a phase table)
LoSoTo.Steps.residuals.Ratio = False # return the ratio instead of subtracting

LoSoTo.Steps.reweight.Operation = REWEIGHT
LoSoTo.Steps.reweight.WeightVal = 1. # Set weights to this values
LoSoTo.Steps.reweight.FlagBad = False # re-flag bad values

LoSoTo.Steps.smooth.Operation = SMOOTH # running median on an arbitrary number of axes - running polyfit on 1 axis or set all solutions to mean/median value
LoSoTo.Steps.smooth.Size = [10, 5] # window size for the runningmedian and runningpoly
LoSoTo.Steps.smooth.Axes = [freq, time] # axes to smooth
LoSoTo.Steps.smooth.Degree = 1 # degrees of the polynomia for the runningpoly
LoSoTo.Steps.smooth.Mode = runningmedian # runningmedian or runningpoly or mean or median (these last two values set all the solutions to the mean/median)
LoSoTo.Steps.smooth.Replace = False # Flagged data are replaced with smoothed value and unflagged

LoSoTo.Steps.tecfit.Operation = TECFIT
LoSoTo.Steps.tecfit.Algorithm = sourcediff # only "sourcediff" available for now
LoSoTo.Steps.tecfit.MinBands = 4
LoSoTo.Steps.tecfit.MaxStations = 26 # Limit to MaxStations number of stations closest to core
LoSoTo.Steps.tecfit.OutSoltab = ion000/tec000

LoSoTo.Steps.tecscreen.Operation = TECSCREEN
LoSoTo.Steps.tecscreen.Height = 200e3
LoSoTo.Steps.tecscreen.Order = 15
LoSoTo.Steps.tecscreen.OutSoltab = [ion000/tecscreen000]
